[{"id":"2966","submission_id":"2966","filename":"I.cpp","source":"I2luY2x1ZGUgPGJpdHMvc3RkYysrLmg+DQp1c2luZyBuYW1lc3BhY2Ugc3RkOw0KdXNpbmcgbGwgPSBsb25nIGxvbmc7DQppbnQgX19fID0gY2luLnRpZSgwKS0+c3luY193aXRoX3N0ZGlvKDApOw0KaW50IHByZVszMF1bMzAxMF07DQoNCg0Kdm9pZCBzb2x2ZSgpIHsNCiAgICBzdHJpbmcgczsNCiAgICBjaW4gPj4gczsNCiAgICBpbnQgbiA9IHMuc2l6ZSgpOw0KICAgIGludCBhbnMgPSAtMTsNCiAgICBzdGQ6OnZlY3RvcjxpbnQ+IHZsKDMwLCAxRTkpLCB2cigzMCwgLTEpOw0KICAgIGZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKXsNCiAgICAgICAgaW50IGMgPSBzW2ldIC0gJ2EnOw0KICAgICAgICBpZiAodmxbY10gPT0gLTEpDQogICAgICAgICAgICB2bFtjXSA9IGk7DQogICAgICAgIHZyW2NdID0gaTsNCiAgICB9DQogICAgYXV0byBpbiA9IFsmXShpbnQgeCkgew0KICAgICAgICByZXR1cm4gMCA8PSB4ICYmIHggPCBuOw0KICAgIH07DQogICAgLyoNCiAgICBhdXRvIGhhcyA9IFsmXShjaGFyIGMsIGludCBsLCBpbnQgcikgew0KICAgICAgICBpZiAodmxbYyAtICdhJ10gPCBsIHx8IHZyW2MgLSAnYSddID4gcikNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfTsqLw0KICAgIGF1dG8gaGFzID0gWyZdKGNoYXIgYywgaW50IGwsIGludCByKSB7DQogICAgICAgIGwgPSBtYXgobCwgMCk7DQogICAgICAgIHIgPSBtaW4ociwgbiAtIDEpOw0KICAgICAgICBsKyssIHIrKzsNCiAgICAgICAgcmV0dXJuIChwcmVbYyAtICdhJ11bcl0gLSBwcmVbYyAtICdhJ11bbCAtIDFdKSA+IDA7DQogICAgfTsNCiAgICBhdXRvIGNoZWNrID0gW10oY2hhciBhLCBjaGFyIGIsIGNoYXIgYywgY2hhciBkKSB7DQogICAgICAgIHJldHVybiBhID09IGQgJiYgYiA9PSBjOw0KICAgIH07DQoNCiAgICBmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykgew0KICAgICAgICAvLy8vLyBzdGQ6OmNvdXQgPDwgImkgPSAiIDw8IGkgPDwgIlxuIjsNCiAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICJvZGRcbiI7DQogICAgICAgIC8vIG9kZA0KICAgICAgICB7DQogICAgICAgICAgICBzdGQ6OnZlY3RvcjxpbnQ+IHA7DQogICAgICAgICAgICBmb3IgKGludCBqID0gMDsgaiA8PSBuOyBqKyspIHsNCiAgICAgICAgICAgICAgICBpZiAoaSAtIGogPCAwIHx8IGkgKyBqID49IG4pIHsNCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHAuc2l6ZSgpIDwgMykNCiAgICAgICAgICAgICAgICAgICAgICAgIHAucHVzaF9iYWNrKGopOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBpZiAoc1tpIC0gal0gIT0gc1tpICsgal0pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHAucHVzaF9iYWNrKGopOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLy8vLyBmb3IgKGF1dG8gcGkgOiBwKQ0KICAgICAgICAgICAgLy8vLy8gICAgIHN0ZDo6Y291dCA8PCBwaSA8PCAnICc7DQogICAgICAgICAgICAvLy8vLyBzdGQ6OmNvdXQgPDwgJ1xuJzsNCiAgICAgICAgICAgIGF1dG8gc2V0cCA9IFsmXShpbnQgdSkgew0KICAgICAgICAgICAgICAgIC8vLy8vIHN0ZDo6Y291dCA8PCAic2V0IHAgPSAiIDw8IHUgPDwgJ1xuJzsNCiAgICAgICAgICAgICAgICBhbnMgPSBzdGQ6Om1heChhbnMsIHBbdV0gKiAyIC0gMSk7DQogICAgICAgICAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICJzZXQgPSAiIDw8IHBbdV0gKiAyIC0gMSA8PCAnXG4nOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHNldHAoMCk7DQogICAgICAgICAgICBpZiAoaW4oaSAtIHBbMF0pICYmIGluKGkgKyBwWzBdKSkgew0KICAgICAgICAgICAgICAgIC8qDQogICAgICAgICAgICAgICAgaWYgKGhhcyhzW2kgLSBwWzBdXSwgaSAtIHBbMF0sIGkgKyBwWzBdKSkNCiAgICAgICAgICAgICAgICAgICAgc2V0cCgxKTsNCiAgICAgICAgICAgICAgICBpZiAoaGFzKHNbaSArIHBbMF1dLCBpIC0gcFswXSwgaSArIHBbMF0pKQ0KICAgICAgICAgICAgICAgICAgICBzZXRwKDEpOw0KICAgICAgICAgICAgICAgICovDQoNCiAgICAgICAgICAgICAgICBmb3IgKGludCBqID0gcFsxXSAtIDE7IGogPiBwWzBdOyBqLS0pIHsNCiAgICAgICAgICAgICAgICAgICAgYm9vbCBmbGFnID0gc1tpIC0gcFswXV0gPT0gc1tpIC0gal0gfHwgc1tpIC0gcFswXV0gPT0gc1tpICsgal07DQogICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnIHx8IHNbaSArIHBbMF1dID09IHNbaSAtIGpdIHx8IHNbaSArIHBbMF1dID09IHNbaSArIGpdOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZykgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICJzZXQgaiA9ICIgPDwgaiA8PCAnXG4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gc3RkOjptYXgoYW5zLCBqICogMiAtIDEpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChpbihpIC0gcFsxXSkgJiYgaW4oaSArIHBbMV0pKSB7DQogICAgICAgICAgICAgICAgICAgIGNoYXIgYSA9IHNbaSAtIHBbMV1dIC0gJ2EnOw0KICAgICAgICAgICAgICAgICAgICBjaGFyIGIgPSBzW2kgLSBwWzBdXSAtICdhJzsNCiAgICAgICAgICAgICAgICAgICAgY2hhciBjID0gc1tpICsgcFswXV0gLSAnYSc7DQogICAgICAgICAgICAgICAgICAgIGNoYXIgZCA9IHNbaSArIHBbMV1dIC0gJ2EnOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2soYSwgYiwgYywgZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRwKDIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2soYiwgYSwgYywgZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRwKDIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2soYywgYiwgYSwgZCkpDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRwKDIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2soYSwgZCwgYywgYikpDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRwKDIpOw0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2soYSwgYiwgZCwgYykpDQogICAgICAgICAgICAgICAgICAgICAgICBzZXRwKDIpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICAvLyBldmVuDQogICAgICAgIC8vLy8vIHN0ZDo6Y291dCA8PCAiZXZlblxuIjsNCiAgICAgICAgew0KICAgICAgICAgICAgc3RkOjp2ZWN0b3I8aW50PiBwOw0KICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPD0gbjsgaisrKSB7DQogICAgICAgICAgICAgICAgaWYgKGkgLSBqIDwgMCB8fCBpICsgaiArIDEgPj0gbikgew0KICAgICAgICAgICAgICAgICAgICB3aGlsZSAocC5zaXplKCkgPCAzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcC5wdXNoX2JhY2soaik7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIGlmIChzW2kgLSBqXSAhPSBzW2kgKyBqICsgMV0pIHsNCiAgICAgICAgICAgICAgICAgICAgICAgIHAucHVzaF9iYWNrKGopOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAvLy8vLyBmb3IgKGF1dG8gcGkgOiBwKQ0KICAgICAgICAgICAgICAgIC8vLy8vIHN0ZDo6Y291dCA8PCBwaSA8PCAnICc7DQogICAgICAgICAgICAvLy8vLyBzdGQ6OmNvdXQgPDwgJ1xuJzsNCg0KICAgICAgICAgICAgYXV0byBzZXRwID0gWyZdKGludCB1KSB7DQogICAgICAgICAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICJzZXQgcCA9ICIgPDwgdSA8PCAnXG4nOw0KICAgICAgICAgICAgICAgIGFucyA9IHN0ZDo6bWF4KGFucywgcFt1XSAqIDIpOw0KICAgICAgICAgICAgICAgIC8vLy8vIHN0ZDo6Y291dCA8PCAic2V0ID0gIiA8PCBwW3VdICogMiA8PCAnXG4nOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICAgIHNldHAoMCk7DQogICAgICAgICAgICBpZiAoaW4oaSAtIHBbMF0pICYmIGluKGkgKyBwWzBdICsgMSkpIHsNCiAgICAgICAgICAgICAgICAvKg0KICAgICAgICAgICAgICAgIGlmIChoYXMoc1tpIC0gcFswXV0sIGkgLSBwWzBdLCBpICsgcFswXSArMSkpDQogICAgICAgICAgICAgICAgICAgIHNldHAoMSk7DQogICAgICAgICAgICAgICAgaWYgKGhhcyhzW2kgKyBwWzBdICsgMV0sIGkgLSBwWzBdLCBpICsgcFswXSArIDEpKQ0KICAgICAgICAgICAgICAgICAgICBzZXRwKDEpOw0KICAgICAgICAgICAgICAgICAgICAqLw0KICAgICAgICAgICAgICAgIGZvciAoaW50IGogPSBwWzFdIC0gMTsgaiA+IHBbMF07IGotLSkgew0KICAgICAgICAgICAgICAgICAgICBib29sIGZsYWcgPSBzW2kgLSBwWzBdXSA9PSBzW2kgLSBqXSB8fCBzW2kgLSBwWzBdXSA9PSBzW2kgKyBqICsgMV07DQogICAgICAgICAgICAgICAgICAgIGZsYWcgPSBmbGFnIHx8IHNbaSArIHBbMF0gKyAxXSA9PSBzW2kgLSBqXSB8fCBzW2kgKyBwWzBdICsgMV0gPT0gc1tpICsgaiArIDFdOw0KICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZykgew0KICAgICAgICAgICAgICAgICAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICJzZXQgaiA9ICIgPDwgaiA8PCAnXG4nOw0KICAgICAgICAgICAgICAgICAgICAgICAgYW5zID0gc3RkOjptYXgoYW5zLCBqICogMik7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgaWYgKGluKGkgLSBwWzFdKSAmJiBpbihpICsgcFsxXSArIDEpKSB7DQogICAgICAgICAgICAgICAgICAgIGNoYXIgYSA9IHNbaSAtIHBbMV1dIC0gJ2EnOw0KICAgICAgICAgICAgICAgICAgICBjaGFyIGIgPSBzW2kgLSBwWzBdXSAtICdhJzsNCiAgICAgICAgICAgICAgICAgICAgY2hhciBjID0gc1tpICsgcFswXSArIDFdIC0gJ2EnOw0KICAgICAgICAgICAgICAgICAgICBjaGFyIGQgPSBzW2kgKyBwWzFdICsgMV0gLSAnYSc7DQogICAgICAgICAgICAgICAgICAgIC8vLy8vIHN0ZDo6Y291dCA8PCBpbnQoYSkgIDw8ICcgJyA8PCBpbnQoYikgPDwgJyAnIDw8IGludChjKSA8PCAnICcgPDwgaW50KGQpIDw8J1xuJzsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKGEsIGIsIGMsIGQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0cCgyKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKGIsIGEsIGMsIGQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0cCgyKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKGMsIGIsIGEsIGQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0cCgyKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKGEsIGQsIGMsIGIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0cCgyKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrKGEsIGIsIGQsIGMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgc2V0cCgyKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgLy8vLy8gc3RkOjpjb3V0IDw8ICdcbic7DQogICAgfQ0KICAgIHN0ZDo6Y291dCA8PCAoYW5zID09IDEgPyAwIDogYW5zKSA8PCAnXG4nOw0KICAgIC8vLy8vIHN0ZDo6Y291dCA8PCAiYW5zID0gIiA8PCBhbnMgPDwgJ1xuJzsNCn0NCg0KaW50IG1haW4gKCl7DQogICAgaW50IFQ7DQogICAgY2luID4+IFQ7DQogICAgd2hpbGUoVCAtLSl7DQogICAgICAgICAgICBzb2x2ZSgpOw0KICAgICAgICAgICAgLy8gYWJjY2FiDQoNCiAgICB9DQoNCn0NCg=="}]